{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","_ref2","poster","alt","react_default","a","createElement","src","title","className","MovieGenre","_ref3","genre","Movie","_ref","genres","overview","map","index","key","API_KEY2","App","state","_renderMovies","gnames","_this","genresNames","movies","movie","src_Movie","concat","poster_path","id","genre_ids","serchKey","filter","g","name","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_callGenresApi","sent","_callApi","setState","stop","fetch","then","response","json","catch","err","console","log","results","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qTAwBA,SAASA,EAATC,GAAmC,IAAbC,EAAaD,EAAbC,OAAQC,EAAKF,EAALE,IAC1B,OACGC,EAAAC,EAAAC,cAAA,OAAKH,IAAKA,EAAKI,IAAKL,EAAQM,MAAOL,EAAKM,UAAU,kBAIzD,SAASC,EAATC,GAA4B,IAAPC,EAAOD,EAAPC,MACjB,OACIR,EAAAC,EAAAC,cAAA,QAAMG,UAAU,gBACXG,GAgBEC,MA5Cf,SAAAC,GAAiD,IAAjCN,EAAiCM,EAAjCN,MAAON,EAA0BY,EAA1BZ,OAAQa,EAAkBD,EAAlBC,OAAQC,EAAUF,EAAVE,SACnC,OACIZ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,SACXL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACXL,EAAAC,EAAAC,cAAA,UAAKE,GACLJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACVM,EAAOE,IAAI,SAACL,EAAOM,GAAR,OAAkBd,EAAAC,EAAAC,cAACI,EAAD,CAAYE,MAAOA,EAAOO,IAAKD,OAEjEd,EAAAC,EAAAC,cAAA,OAAKG,UAAU,mBACVO,IAGTZ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACXL,EAAAC,EAAAC,cAACN,EAAD,CAAaE,OAAQA,OCT/BkB,EAAU,mCAwEDC,6MA9DbC,MAAQ,KAMRC,cAAgB,WACd,IAIMC,EAASC,EAAKH,MAAMI,YAY1B,OAXeD,EAAKH,MAAMK,OAAOV,IAAK,SAAAW,GACpC,OACQxB,EAAAC,EAAAC,cAACuB,EAAD,CACErB,MAAOoB,EAAMpB,MACbN,OAAQ,kCAAkC4B,OAAOF,EAAMG,aACvDZ,IAAKS,EAAMI,GACXjB,OAAQa,EAAMK,UAAUhB,IAAI,SAAAe,GAAE,OAX7BE,EAWqCF,EAAGR,EAV1BW,OAAO,SAAAC,GAAC,OAAIA,EAAEJ,KAAOE,IAC7B,GAAGG,KAFV,IAACH,IAYDlB,SAAUY,EAAMZ,gBAO9BsB,gCAAa,SAAAC,IAAA,IAAAb,EAAAC,EAAA,OAAAa,EAAAnC,EAAAoC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACenB,EAAKoB,iBADpB,cACLnB,EADKgB,EAAAI,KAAAJ,EAAAE,KAAA,EAEUnB,EAAKsB,WAFf,OAELpB,EAFKe,EAAAI,KAGXrB,EAAKuB,SAAS,CACZrB,SACAD,gBALS,wBAAAgB,EAAAO,SAAAV,QASbM,eAAiB,WACf,OAAOK,MAAK,qEAAApB,OAAsEV,IAClF+B,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GAAI,OAAIA,EAAKtC,SAClBuC,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,QAG3BR,SAAW,WACT,OAAOG,MAAK,+EAAApB,OAAgFV,EAAhF,YACX+B,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GAAI,OAAIA,EAAKK,UAClBJ,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,yFA3C1BI,KAAKrB,8CA+CE,IACCX,EAAWgC,KAAKrC,MAAhBK,OACR,OACEvB,EAAAC,EAAAC,cAAA,OAAKG,UAAYkB,EAAS,MAAQ,eAC/BA,EAASgC,KAAKpC,gBAAkB,kBA3DvBqC,aCFEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/D,EAAAC,EAAAC,cAAC8D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,KAAK,SAAAuB,GACjCA,EAAaC","file":"static/js/main.d60e9bcc.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './Movie.css';\r\n\r\n\r\nfunction Movie({title, poster, genres, overview}){\r\n    return (\r\n        <div className=\"Movie\">\r\n            <div className=\"Movie__Column\">\r\n                <h1>{title}</h1> \r\n                <div className=\"Movie__Genres\">\r\n                    {genres.map((genre, index) => <MovieGenre genre={genre} key={index} />)}\r\n                </div>\r\n                <div className=\"Movie__Overview\">\r\n                    {overview}\r\n                </div>\r\n            </div>\r\n            <div className=\"Movie__Column\">\r\n                <MoviePoster poster={poster}/>\r\n            </div>\r\n      </div>\r\n    )\r\n}\r\n\r\nfunction MoviePoster({poster, alt}){ \r\n    return (\r\n       <img alt={alt} src={poster} title={alt} className=\"Movie__Poster\" />\r\n    )\r\n}\r\n\r\nfunction MovieGenre({genre}){\r\n    return(\r\n        <span className=\"Movie__Genre\">\r\n            {genre}\r\n        </span>\r\n    )\r\n}\r\n\r\nMovie.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    poster: PropTypes.string.isRequired,\r\n    genres: PropTypes.array.isRequired,\r\n    overview : PropTypes.string.isRequired\r\n}\r\n    \r\nMoviePoster.propTypes = {\r\n        poster: PropTypes.string.isRequired\r\n    }\r\n    \r\nexport default Movie;","import React, { Component } from 'react';\nimport './App.css';\nimport Movie from './Movie.js';\n\n\n// API1 한국영화진응원\n// const API_KEY1 =\"9a3ba8e87a8eaa8eacca8ed50f16f7ea\";\n\n// API2 The movie DB v3 auth\nconst API_KEY2 =\"39c569be9c413ae8a3f9b9132f02cf18\";\n// API3 The movie DB 읽기 Access 토큰 \n// const API_KEY3 =\"eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIzOWM1NjliZTljNDEzYWU4YTNmOWI5MTMyZjAyY2YxOCIsInN1YiI6IjVjOTE5MDkyYzNhMzY4NjExMTUxYWJmOSIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.lO1bKvxTzduh_v839h9MjDFIgJVQHKKAUV3CLj5HNok\"\n\n\nclass App extends Component {\n\n  // Render : componentWillMount() -> render()  -> componentDidMount()\n  // Update : componentWillReceiveProps() -> shouldComponentUpdate() -> componentWillUpdate -> render() -> componentDidUpdate\n\n  state = {};\n  \n  componentDidMount(){\n    this._getMovies();\n  }\n\n  _renderMovies = () => {\n    const _yy = (serchKey,objArr) => {\n      const resultArr = objArr.filter(g => g.id === serchKey)\n      return resultArr[0].name\n    }\n    const gnames = this.state.genresNames\n    const movies = this.state.movies.map( movie => {\n      return ( \n              <Movie \n                title={movie.title} \n                poster={\"https://image.tmdb.org/t/p/w500\".concat(movie.poster_path)} \n                key={movie.id}\n                genres={movie.genre_ids.map(id => _yy(id,gnames))}\n                overview={movie.overview}\n              />\n      )\n    })\n    return movies\n  }\n\n  _getMovies = async () => {\n    const genresNames = await this._callGenresApi(); \n    const movies = await this._callApi()\n    this.setState({\n      movies,\n      genresNames\n    })\n  }\n\n  _callGenresApi = () => {\n    return fetch(`https://api.themoviedb.org/3/genre/movie/list?language=ko&api_key=${API_KEY2}`)\n   .then(response => response.json())\n   .then(json => json.genres) \n   .catch(err => console.log(err))\n  }\n\n  _callApi = () => {\n    return fetch(`https://api.themoviedb.org/3/discover/movie?sort_by=popularity.desc&api_key=${API_KEY2}&page=1`)\n    .then(response => response.json())\n    .then(json => json.results)\n    .catch(err => console.log(err))\n  }\n\n\n  render() {\n    const { movies } = this.state;\n    return (\n      <div className= {movies ? \"App\" : \"App-loading\"}>\n        {movies ? this._renderMovies() : 'Loading' }\n      </div>\n    );\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}